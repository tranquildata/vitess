// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const SQL_CALC_FOUND_ROWS = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const INTERVAL = 57441
const JSON_EXTRACT_OP = 57442
const JSON_UNQUOTE_EXTRACT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const FLUSH = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const VIEW = 57454
const TO = 57455
const IGNORE = 57456
const IF = 57457
const UNIQUE = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const INDEXES = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const WARNINGS = 57492
const SEQUENCE = 57493
const BEGIN = 57494
const START = 57495
const TRANSACTION = 57496
const COMMIT = 57497
const ROLLBACK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const GEOMETRY = 57532
const POINT = 57533
const LINESTRING = 57534
const POLYGON = 57535
const GEOMETRYCOLLECTION = 57536
const MULTIPOINT = 57537
const MULTILINESTRING = 57538
const MULTIPOLYGON = 57539
const NULLX = 57540
const AUTO_INCREMENT = 57541
const APPROXNUM = 57542
const SIGNED = 57543
const UNSIGNED = 57544
const ZEROFILL = 57545
const COLLATION = 57546
const DATABASES = 57547
const TABLES = 57548
const VITESS_METADATA = 57549
const VSCHEMA = 57550
const FULL = 57551
const PROCESSLIST = 57552
const COLUMNS = 57553
const FIELDS = 57554
const ENGINES = 57555
const PLUGINS = 57556
const EXTENDED = 57557
const NAMES = 57558
const CHARSET = 57559
const GLOBAL = 57560
const SESSION = 57561
const ISOLATION = 57562
const LEVEL = 57563
const READ = 57564
const WRITE = 57565
const ONLY = 57566
const REPEATABLE = 57567
const COMMITTED = 57568
const UNCOMMITTED = 57569
const SERIALIZABLE = 57570
const CURRENT_TIMESTAMP = 57571
const DATABASE = 57572
const CURRENT_DATE = 57573
const CURRENT_TIME = 57574
const LOCALTIME = 57575
const LOCALTIMESTAMP = 57576
const UTC_DATE = 57577
const UTC_TIME = 57578
const UTC_TIMESTAMP = 57579
const REPLACE = 57580
const CONVERT = 57581
const CAST = 57582
const SUBSTR = 57583
const SUBSTRING = 57584
const GROUP_CONCAT = 57585
const SEPARATOR = 57586
const TIMESTAMPADD = 57587
const TIMESTAMPDIFF = 57588
const MATCH = 57589
const AGAINST = 57590
const BOOLEAN = 57591
const LANGUAGE = 57592
const WITH = 57593
const QUERY = 57594
const EXPANSION = 57595
const UNUSED = 57596
const ARRAY = 57597
const CUME_DIST = 57598
const DESCRIPTION = 57599
const DENSE_RANK = 57600
const EMPTY = 57601
const EXCEPT = 57602
const FIRST_VALUE = 57603
const GROUPING = 57604
const GROUPS = 57605
const JSON_TABLE = 57606
const LAG = 57607
const LAST_VALUE = 57608
const LATERAL = 57609
const LEAD = 57610
const MEMBER = 57611
const NTH_VALUE = 57612
const NTILE = 57613
const OF = 57614
const OVER = 57615
const PERCENT_RANK = 57616
const RANK = 57617
const RECURSIVE = 57618
const ROW_NUMBER = 57619
const SYSTEM = 57620
const WINDOW = 57621
const ACTIVE = 57622
const ADMIN = 57623
const BUCKETS = 57624
const CLONE = 57625
const COMPONENT = 57626
const DEFINITION = 57627
const ENFORCED = 57628
const EXCLUDE = 57629
const FOLLOWING = 57630
const GEOMCOLLECTION = 57631
const GET_MASTER_PUBLIC_KEY = 57632
const HISTOGRAM = 57633
const HISTORY = 57634
const INACTIVE = 57635
const INVISIBLE = 57636
const LOCKED = 57637
const MASTER_COMPRESSION_ALGORITHMS = 57638
const MASTER_PUBLIC_KEY_PATH = 57639
const MASTER_TLS_CIPHERSUITES = 57640
const MASTER_ZSTD_COMPRESSION_LEVEL = 57641
const NESTED = 57642
const NETWORK_NAMESPACE = 57643
const NOWAIT = 57644
const NULLS = 57645
const OJ = 57646
const OLD = 57647
const OPTIONAL = 57648
const ORDINALITY = 57649
const ORGANIZATION = 57650
const OTHERS = 57651
const PATH = 57652
const PERSIST = 57653
const PERSIST_ONLY = 57654
const PRECEDING = 57655
const PRIVILEGE_CHECKS_USER = 57656
const PROCESS = 57657
const RANDOM = 57658
const REFERENCE = 57659
const REQUIRE_ROW_FORMAT = 57660
const RESOURCE = 57661
const RESPECT = 57662
const RESTART = 57663
const RETAIN = 57664
const REUSE = 57665
const ROLE = 57666
const SECONDARY = 57667
const SECONDARY_ENGINE = 57668
const SECONDARY_LOAD = 57669
const SECONDARY_UNLOAD = 57670
const SKIP = 57671
const SRID = 57672
const THREAD_PRIORITY = 57673
const TIES = 57674
const UNBOUNDED = 57675
const VCPU = 57676
const VISIBLE = 57677

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 38,
	33, 299,
	128, 299,
	140, 299,
	165, 313,
	166, 313,
	-2, 301,
	-1, 62,
	37, 337,
	-2, 345,
	-1, 318,
	37, 338,
	-2, 350,
	-1, 319,
	37, 339,
	-2, 351,
	-1, 334,
	116, 667,
	-2, 663,
	-1, 335,
	116, 668,
	-2, 664,
	-1, 404,
	86, 918,
	-2, 66,
	-1, 405,
	86, 835,
	-2, 67,
	-1, 410,
	86, 803,
	-2, 629,
	-1, 412,
	86, 866,
	-2, 631,
	-1, 715,
	1, 375,
	5, 375,
	12, 375,
	13, 375,
	14, 375,
	15, 375,
	17, 375,
	19, 375,
	30, 375,
	31, 375,
	44, 375,
	45, 375,
	46, 375,
	47, 375,
	48, 375,
	50, 375,
	51, 375,
	54, 375,
	55, 375,
	57, 375,
	58, 375,
	353, 375,
	-2, 393,
	-1, 718,
	55, 48,
	57, 48,
	-2, 52,
	-1, 874,
	116, 670,
	-2, 666,
	-1, 1109,
	5, 34,
	-2, 461,
	-1, 1140,
	5, 33,
	-2, 602,
	-1, 1387,
	5, 34,
	-2, 603,
	-1, 1440,
	5, 33,
	-2, 605,
	-1, 1515,
	5, 34,
	-2, 606,
}

const yyPrivate = 57344

const yyLast = 16362

var yyAct = [...]int{

	334, 1549, 1539, 1347, 1505, 1236, 339, 990, 1143, 1420,
	1407, 1453, 575, 1161, 352, 1321, 1288, 1019, 670, 1289,
	1285, 365, 986, 1144, 963, 58, 1033, 564, 1187, 999,
	1295, 669, 3, 81, 1301, 1260, 989, 271, 899, 291,
	271, 836, 1213, 1204, 961, 1101, 731, 298, 929, 1003,
	965, 950, 307, 1087, 876, 320, 906, 599, 711, 409,
	612, 817, 712, 605, 1029, 730, 720, 533, 271, 81,
	337, 403, 534, 271, 943, 271, 398, 395, 57, 622,
	1542, 406, 1526, 1537, 306, 684, 62, 1052, 553, 1513,
	1534, 1348, 1525, 299, 300, 301, 302, 685, 1277, 305,
	1379, 1051, 1512, 538, 267, 263, 264, 265, 341, 1315,
	909, 1316, 1317, 64, 65, 66, 67, 68, 981, 982,
	980, 83, 84, 85, 1175, 326, 732, 1174, 733, 1261,
	1176, 83, 84, 85, 1195, 83, 84, 85, 593, 304,
	303, 1012, 1050, 1479, 635, 634, 644, 645, 637, 638,
	639, 640, 641, 642, 643, 636, 1410, 377, 646, 383,
	384, 381, 382, 380, 379, 378, 1238, 1020, 1263, 83,
	84, 85, 259, 385, 386, 257, 588, 261, 1370, 1368,
	589, 586, 587, 297, 591, 806, 581, 582, 275, 570,
	1240, 572, 1047, 1044, 1045, 278, 1043, 592, 805, 803,
	1536, 1533, 1265, 285, 1269, 1506, 1264, 1235, 1262, 573,
	944, 1498, 1004, 1267, 1557, 554, 1223, 540, 261, 1239,
	1162, 1164, 1266, 569, 571, 266, 807, 1241, 1462, 1054,
	1057, 578, 810, 794, 804, 1268, 1270, 283, 543, 1006,
	1232, 1311, 1310, 290, 1309, 536, 1234, 1219, 1220, 1221,
	1006, 274, 262, 1064, 332, 1487, 1063, 1454, 271, 545,
	546, 658, 659, 271, 1390, 555, 1049, 1553, 1246, 271,
	276, 260, 1456, 1171, 1128, 271, 562, 1095, 847, 568,
	81, 83, 84, 85, 81, 1118, 81, 726, 1048, 626,
	1115, 560, 81, 258, 987, 646, 1013, 287, 279, 1163,
	288, 289, 295, 844, 1020, 837, 280, 282, 292, 567,
	277, 294, 293, 550, 831, 1480, 1222, 1511, 976, 566,
	841, 1227, 1224, 1215, 1225, 1218, 577, 1214, 1053, 81,
	1496, 1216, 1217, 1463, 1461, 621, 607, 71, 579, 1005,
	1455, 1006, 1471, 1055, 608, 1226, 1233, 1299, 1231, 734,
	1005, 595, 596, 1279, 556, 557, 558, 635, 634, 644,
	645, 637, 638, 639, 640, 641, 642, 643, 636, 620,
	619, 646, 83, 84, 85, 72, 613, 598, 547, 1551,
	548, 930, 1552, 549, 1550, 636, 621, 619, 646, 796,
	838, 658, 659, 271, 271, 271, 658, 659, 1009, 832,
	609, 565, 81, 621, 1010, 83, 84, 85, 81, 83,
	84, 85, 1102, 930, 406, 1125, 635, 634, 644, 645,
	637, 638, 639, 640, 641, 642, 643, 636, 611, 1501,
	646, 639, 640, 641, 642, 643, 636, 883, 710, 646,
	1113, 1005, 1112, 1193, 532, 656, 1002, 1000, 55, 1001,
	616, 881, 882, 880, 1558, 1517, 998, 1004, 1334, 1416,
	879, 620, 619, 724, 687, 689, 691, 693, 695, 697,
	698, 1415, 719, 729, 539, 1208, 688, 690, 621, 694,
	696, 1207, 699, 1196, 637, 638, 639, 640, 641, 642,
	643, 636, 1519, 580, 646, 583, 630, 1559, 633, 1497,
	256, 594, 715, 1434, 647, 648, 649, 650, 651, 652,
	653, 1413, 631, 632, 629, 635, 634, 644, 645, 637,
	638, 639, 640, 641, 642, 643, 636, 850, 851, 646,
	866, 868, 869, 271, 1114, 846, 867, 792, 81, 1205,
	795, 1074, 797, 271, 271, 81, 81, 81, 620, 619,
	822, 271, 541, 542, 271, 1281, 598, 271, 815, 816,
	1468, 271, 23, 81, 1467, 621, 392, 393, 81, 81,
	81, 271, 81, 81, 845, 1298, 1092, 1093, 1094, 620,
	619, 1330, 81, 81, 83, 84, 85, 1286, 620, 619,
	1298, 821, 1007, 620, 619, 1385, 621, 660, 661, 662,
	663, 664, 665, 666, 667, 621, 1459, 1535, 1521, 598,
	621, 81, 355, 354, 357, 358, 359, 360, 271, 911,
	819, 356, 361, 311, 81, 83, 84, 85, 1470, 901,
	55, 811, 83, 84, 85, 1338, 1178, 1459, 1509, 873,
	1459, 598, 952, 955, 956, 957, 953, 900, 954, 958,
	947, 877, 1302, 1303, 1459, 1488, 902, 1459, 1458, 1179,
	852, 1405, 1404, 1392, 598, 1389, 598, 1088, 81, 861,
	634, 644, 645, 637, 638, 639, 640, 641, 642, 643,
	636, 1340, 1339, 646, 918, 921, 874, 25, 872, 722,
	931, 1336, 1337, 1336, 1335, 859, 598, 947, 598, 911,
	598, 81, 81, 870, 913, 741, 740, 1088, 59, 271,
	979, 1138, 947, 722, 25, 1131, 1139, 271, 271, 946,
	860, 271, 271, 1130, 859, 271, 271, 271, 81, 903,
	904, 721, 970, 723, 721, 725, 848, 55, 878, 809,
	406, 81, 534, 1439, 727, 1237, 947, 793, 1527, 1423,
	859, 25, 1298, 991, 800, 801, 802, 723, 1037, 721,
	939, 940, 313, 1422, 55, 971, 859, 1014, 1397, 973,
	1034, 1326, 820, 1021, 1022, 1023, 1182, 824, 825, 826,
	1030, 828, 829, 1025, 914, 915, 819, 1024, 920, 923,
	924, 833, 834, 969, 978, 271, 81, 1544, 81, 977,
	1056, 55, 974, 1540, 271, 271, 271, 271, 271, 994,
	271, 271, 55, 938, 271, 81, 941, 942, 1035, 1328,
	952, 955, 956, 957, 953, 715, 954, 958, 1305, 715,
	1531, 271, 1286, 715, 1302, 1303, 271, 1209, 271, 271,
	842, 813, 1155, 271, 1153, 321, 1308, 1156, 1157, 1154,
	956, 957, 1307, 1031, 1032, 1152, 1151, 1524, 322, 1245,
	873, 271, 1076, 610, 1071, 614, 615, 324, 1529, 323,
	1086, 335, 644, 645, 637, 638, 639, 640, 641, 642,
	643, 636, 1382, 875, 646, 1085, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 926, 877, 600, 82, 1090, 1200, 874, 272, 1079,
	1081, 272, 1080, 739, 927, 601, 563, 1091, 1192, 1503,
	1089, 1502, 635, 634, 644, 645, 637, 638, 639, 640,
	641, 642, 643, 636, 321, 1097, 646, 1437, 1190, 272,
	82, 935, 1184, 1383, 272, 1418, 272, 322, 271, 271,
	271, 271, 271, 1145, 318, 319, 324, 1040, 323, 812,
	271, 960, 1084, 271, 314, 315, 308, 271, 1359, 715,
	1083, 271, 309, 59, 1358, 1140, 1249, 1124, 1088, 590,
	1546, 1545, 61, 1119, 1116, 835, 617, 1546, 1177, 878,
	81, 1484, 1411, 843, 913, 63, 56, 1180, 1, 1183,
	1538, 1349, 991, 1188, 1188, 1039, 1146, 1041, 1419, 1149,
	1158, 1147, 1148, 1046, 1150, 1168, 1504, 1166, 1106, 1107,
	1452, 1320, 997, 1167, 1068, 1169, 1172, 1170, 988, 70,
	531, 69, 1189, 1197, 1198, 1495, 1122, 830, 81, 81,
	576, 996, 1199, 995, 1201, 1202, 1203, 1015, 1016, 1017,
	1018, 1185, 1186, 1460, 1409, 1008, 715, 715, 715, 715,
	715, 1194, 1011, 1026, 1027, 1028, 1327, 1191, 81, 1206,
	1500, 715, 747, 745, 746, 744, 1381, 749, 748, 715,
	743, 284, 401, 271, 959, 735, 1036, 1228, 618, 73,
	1212, 1230, 1229, 1042, 840, 281, 81, 584, 585, 286,
	654, 1082, 1173, 407, 400, 1293, 849, 604, 1252, 1357,
	1248, 1243, 1244, 1123, 900, 681, 635, 634, 644, 645,
	637, 638, 639, 640, 641, 642, 643, 636, 928, 272,
	646, 340, 865, 353, 272, 350, 1098, 1099, 1100, 351,
	272, 1282, 81, 81, 1254, 1145, 272, 1287, 1278, 854,
	1272, 82, 1271, 1253, 1137, 82, 628, 82, 338, 330,
	714, 1290, 707, 82, 951, 949, 81, 948, 396, 1304,
	1300, 713, 858, 1292, 317, 1378, 1478, 316, 925, 27,
	81, 60, 81, 81, 1306, 325, 1188, 1188, 874, 1319,
	1079, 20, 991, 1313, 991, 19, 1312, 1297, 18, 21,
	82, 1333, 1376, 17, 16, 15, 551, 31, 22, 14,
	271, 13, 12, 1323, 1324, 1325, 1318, 11, 10, 9,
	1331, 1332, 1314, 8, 7, 6, 5, 4, 310, 24,
	271, 2, 0, 0, 0, 0, 81, 934, 1350, 81,
	81, 81, 271, 0, 0, 0, 0, 81, 1211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1252,
	0, 1342, 0, 0, 272, 272, 272, 0, 0, 0,
	0, 1355, 1356, 82, 0, 0, 1343, 1242, 1345, 82,
	635, 634, 644, 645, 637, 638, 639, 640, 641, 642,
	643, 636, 1366, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1145, 0, 0, 1384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 1394, 1393, 0, 0, 1180, 81, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 1412, 0, 1414, 0, 1256, 1257, 0,
	0, 1421, 0, 0, 0, 1427, 1403, 0, 0, 0,
	1273, 1274, 0, 1275, 1276, 0, 0, 0, 1425, 0,
	0, 0, 1426, 0, 0, 1283, 1284, 0, 0, 0,
	81, 81, 0, 81, 0, 0, 0, 0, 81, 0,
	81, 81, 81, 271, 272, 1438, 81, 1290, 1446, 82,
	1447, 1449, 1450, 0, 272, 272, 82, 82, 82, 0,
	1440, 1457, 272, 81, 271, 272, 1464, 1451, 272, 0,
	0, 1433, 272, 1472, 82, 1465, 0, 1466, 0, 82,
	82, 82, 272, 82, 82, 0, 1445, 1329, 0, 0,
	0, 0, 0, 82, 82, 1494, 1485, 0, 0, 0,
	81, 1290, 0, 0, 1493, 1492, 0, 0, 0, 0,
	0, 81, 81, 1486, 0, 0, 0, 0, 0, 1508,
	1507, 0, 82, 1421, 991, 0, 0, 0, 81, 272,
	0, 1145, 0, 1514, 0, 82, 0, 0, 0, 271,
	0, 0, 366, 52, 0, 0, 0, 81, 0, 0,
	1361, 0, 0, 0, 0, 1523, 0, 0, 0, 0,
	0, 0, 1375, 0, 0, 0, 1528, 1530, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1532, 82,
	0, 1543, 0, 0, 597, 0, 0, 0, 1554, 0,
	0, 1417, 0, 0, 0, 52, 0, 0, 1363, 1364,
	1374, 1365, 0, 312, 1367, 0, 1369, 0, 0, 0,
	0, 0, 82, 82, 0, 0, 0, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 272, 272,
	0, 764, 272, 272, 0, 0, 272, 272, 272, 82,
	635, 634, 644, 645, 637, 638, 639, 640, 641, 642,
	643, 636, 82, 0, 646, 0, 0, 0, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 1429,
	1430, 1431, 1432, 0, 0, 0, 1435, 1436, 635, 634,
	644, 645, 637, 638, 639, 640, 641, 642, 643, 636,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 364, 272, 82, 0, 82,
	0, 0, 0, 752, 0, 272, 272, 272, 272, 272,
	0, 272, 272, 0, 0, 272, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 272, 0, 0, 0, 0, 272, 0, 272,
	272, 0, 765, 0, 272, 0, 0, 0, 0, 1373,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 0, 408, 778, 781, 782, 783, 784,
	785, 786, 0, 787, 788, 789, 790, 791, 766, 767,
	768, 769, 750, 751, 779, 0, 753, 0, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 770, 771,
	772, 773, 774, 775, 776, 777, 0, 0, 0, 0,
	0, 0, 574, 0, 0, 0, 574, 0, 574, 0,
	0, 0, 0, 0, 574, 0, 1547, 635, 634, 644,
	645, 637, 638, 639, 640, 641, 642, 643, 636, 0,
	0, 646, 0, 0, 0, 52, 0, 0, 0, 272,
	272, 272, 272, 272, 0, 0, 0, 780, 1255, 0,
	0, 272, 0, 0, 272, 0, 655, 0, 272, 657,
	0, 0, 272, 0, 0, 0, 853, 0, 635, 634,
	644, 645, 637, 638, 639, 640, 641, 642, 643, 636,
	0, 82, 646, 0, 0, 0, 0, 668, 0, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 0, 683,
	686, 686, 686, 692, 686, 686, 692, 686, 700, 701,
	702, 703, 704, 705, 706, 1103, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 910, 912, 82,
	82, 0, 0, 0, 0, 635, 634, 644, 645, 637,
	638, 639, 640, 641, 642, 643, 636, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 408, 0, 0, 0, 408,
	0, 408, 0, 0, 272, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 635, 634,
	644, 645, 637, 638, 639, 640, 641, 642, 643, 636,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 82, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	574, 0, 0, 0, 0, 0, 0, 574, 574, 574,
	0, 82, 0, 82, 82, 0, 0, 0, 0, 270,
	0, 0, 296, 0, 0, 574, 0, 408, 0, 0,
	574, 574, 574, 736, 574, 574, 0, 0, 0, 0,
	0, 272, 0, 0, 574, 574, 0, 329, 0, 0,
	399, 0, 0, 0, 0, 270, 0, 270, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 82, 0, 0,
	82, 82, 82, 272, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 1109, 1110, 1111, 0, 0, 0, 0, 1117, 0,
	52, 1120, 1121, 0, 0, 0, 0, 0, 0, 1127,
	0, 0, 0, 1129, 0, 672, 1132, 1133, 1134, 1135,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 82, 1160,
	0, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	408, 408, 408, 82, 0, 0, 0, 0, 0, 962,
	82, 0, 0, 716, 0, 0, 0, 716, 408, 0,
	0, 0, 0, 408, 408, 408, 0, 408, 408, 0,
	0, 0, 0, 328, 0, 0, 0, 408, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 82, 0, 82, 0, 0, 0, 0, 82,
	0, 82, 82, 82, 272, 0, 855, 82, 0, 0,
	270, 0, 0, 0, 0, 270, 0, 0, 0, 624,
	0, 270, 408, 0, 82, 272, 0, 270, 574, 0,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 905, 0, 0, 0, 0, 0, 0,
	329, 0, 82, 82, 1258, 1259, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 716, 0, 0, 936, 937, 0, 0,
	272, 0, 0, 0, 0, 0, 1096, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 408, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 270, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1141, 1142, 0, 0,
	716, 716, 716, 716, 716, 0, 0, 0, 0, 0,
	0, 408, 0, 408, 0, 962, 0, 1165, 0, 0,
	0, 0, 0, 716, 0, 0, 0, 0, 0, 0,
	408, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	0, 1360, 0, 0, 0, 0, 0, 0, 1362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1371,
	1372, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 1386,
	1387, 1388, 0, 1391, 0, 0, 0, 0, 0, 0,
	0, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	1402, 397, 602, 606, 0, 270, 535, 0, 537, 0,
	0, 0, 0, 0, 0, 270, 270, 0, 0, 0,
	574, 0, 0, 270, 0, 627, 270, 0, 0, 270,
	0, 0, 0, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 932, 0, 0, 0, 0, 0, 0, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	270, 0, 1291, 0, 52, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 1475, 1476, 1477,
	0, 1481, 0, 1482, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 1491, 0,
	0, 329, 0, 0, 0, 0, 329, 329, 0, 0,
	329, 329, 329, 1210, 408, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 1515, 329, 329, 329, 329, 329,
	0, 270, 0, 408, 0, 0, 0, 0, 0, 270,
	967, 544, 1520, 270, 270, 0, 552, 270, 975, 818,
	0, 0, 559, 0, 0, 0, 0, 0, 561, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1377, 0, 0, 0, 0, 1555, 1556, 0, 0, 0,
	0, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 1294, 1296, 0,
	823, 0, 1399, 1400, 1401, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 270, 270, 270,
	270, 1296, 270, 270, 839, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 574, 408, 0, 408, 1322, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 270, 0,
	1072, 1073, 0, 863, 864, 270, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 0, 709, 0, 718, 0,
	0, 0, 329, 270, 0, 0, 0, 0, 1291, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 408, 0, 0, 0, 671, 0, 0, 916,
	917, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 329, 0, 25, 26, 53, 28, 29, 0, 0,
	0, 0, 1291, 0, 52, 0, 0, 0, 329, 0,
	0, 0, 44, 0, 0, 0, 0, 30, 49, 50,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 933,
	270, 270, 270, 270, 270, 0, 0, 0, 985, 39,
	0, 0, 1159, 55, 408, 270, 0, 0, 0, 967,
	0, 0, 1408, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 408, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 798, 799, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 397, 0, 1541,
	814, 0, 0, 0, 0, 0, 32, 33, 35, 34,
	37, 0, 51, 0, 827, 1442, 1443, 0, 1444, 0,
	0, 0, 0, 1408, 0, 1408, 1408, 1408, 0, 0,
	0, 1322, 0, 0, 0, 38, 45, 46, 0, 0,
	47, 48, 36, 0, 0, 0, 0, 0, 1408, 1077,
	1078, 0, 606, 0, 0, 0, 40, 41, 0, 42,
	43, 862, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 818, 0, 1516, 0, 1108, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 1408, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 1059, 1060,
	1061, 1062, 0, 1065, 1066, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 1070,
	0, 933, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 1380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 0, 1396, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 518, 506, 0, 463,
	521, 436, 453, 529, 454, 457, 494, 421, 476, 171,
	451, 0, 440, 416, 447, 417, 438, 465, 115, 469,
	435, 508, 479, 520, 143, 441, 527, 145, 485, 0,
	217, 159, 0, 0, 0, 467, 510, 474, 503, 462,
	495, 426, 484, 522, 452, 492, 523, 0, 0, 0,
	83, 84, 85, 0, 992, 993, 0, 0, 0, 0,
	0, 105, 0, 489, 517, 449, 491, 493, 415, 486,
	0, 419, 422, 528, 513, 444, 445, 1181, 0, 0,
	0, 0, 0, 0, 466, 475, 500, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 1473, 483, 0,
	0, 0, 423, 420, 0, 0, 464, 0, 0, 0,
	425, 0, 443, 501, 0, 413, 124, 505, 512, 461,
	273, 516, 459, 458, 519, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 509,
	439, 448, 109, 446, 199, 178, 237, 482, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 1518, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 418, 0, 218,
	240, 255, 103, 434, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 430, 433, 428,
	429, 477, 478, 524, 525, 526, 502, 424, 0, 431,
	432, 0, 507, 514, 515, 481, 86, 95, 144, 252,
	192, 120, 241, 414, 427, 113, 437, 0, 0, 450,
	455, 456, 468, 470, 471, 472, 473, 480, 487, 488,
	490, 496, 497, 498, 499, 504, 511, 530, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 518, 506, 0, 463, 521, 436,
	453, 529, 454, 457, 494, 421, 476, 171, 451, 0,
	440, 416, 447, 417, 438, 465, 115, 469, 435, 508,
	479, 520, 143, 441, 527, 145, 485, 0, 217, 159,
	0, 0, 0, 467, 510, 474, 503, 462, 495, 426,
	484, 522, 452, 492, 523, 0, 0, 0, 83, 84,
	85, 0, 992, 993, 0, 0, 0, 0, 0, 105,
	0, 489, 517, 449, 491, 493, 415, 486, 0, 419,
	422, 528, 513, 444, 445, 0, 0, 0, 0, 0,
	0, 0, 466, 475, 500, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 483, 0, 0, 0,
	423, 420, 0, 0, 464, 0, 0, 0, 425, 0,
	443, 501, 0, 413, 124, 505, 512, 461, 273, 516,
	459, 458, 519, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 509, 439, 448,
	109, 446, 199, 178, 237, 482, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 418, 0, 218, 240, 255,
	103, 434, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 430, 433, 428, 429, 477,
	478, 524, 525, 526, 502, 424, 0, 431, 432, 0,
	507, 514, 515, 481, 86, 95, 144, 252, 192, 120,
	241, 414, 427, 113, 437, 0, 0, 450, 455, 456,
	468, 470, 471, 472, 473, 480, 487, 488, 490, 496,
	497, 498, 499, 504, 511, 530, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 518, 506, 0, 463, 521, 436, 453, 529,
	454, 457, 494, 421, 476, 171, 451, 0, 440, 416,
	447, 417, 438, 465, 115, 469, 435, 508, 479, 520,
	143, 441, 527, 145, 485, 0, 217, 159, 0, 0,
	0, 467, 510, 474, 503, 462, 495, 426, 484, 522,
	452, 492, 523, 55, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 489,
	517, 449, 491, 493, 415, 486, 0, 419, 422, 528,
	513, 444, 445, 0, 0, 0, 0, 0, 0, 0,
	466, 475, 500, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 483, 0, 0, 0, 423, 420,
	0, 0, 464, 0, 0, 0, 425, 0, 443, 501,
	0, 413, 124, 505, 512, 461, 273, 516, 459, 458,
	519, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 509, 439, 448, 109, 446,
	199, 178, 237, 482, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 418, 0, 218, 240, 255, 103, 434,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 430, 433, 428, 429, 477, 478, 524,
	525, 526, 502, 424, 0, 431, 432, 0, 507, 514,
	515, 481, 86, 95, 144, 252, 192, 120, 241, 414,
	427, 113, 437, 0, 0, 450, 455, 456, 468, 470,
	471, 472, 473, 480, 487, 488, 490, 496, 497, 498,
	499, 504, 511, 530, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	518, 506, 0, 463, 521, 436, 453, 529, 454, 457,
	494, 421, 476, 171, 451, 0, 440, 416, 447, 417,
	438, 465, 115, 469, 435, 508, 479, 520, 143, 441,
	527, 145, 485, 0, 217, 159, 0, 0, 0, 467,
	510, 474, 503, 462, 495, 426, 484, 522, 452, 492,
	523, 0, 0, 0, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 489, 517, 449,
	491, 493, 415, 486, 0, 419, 422, 528, 513, 444,
	445, 0, 0, 0, 0, 0, 0, 0, 466, 475,
	500, 460, 0, 0, 0, 0, 0, 0, 1251, 0,
	442, 0, 483, 0, 0, 0, 423, 420, 0, 0,
	464, 0, 0, 0, 425, 0, 443, 501, 0, 413,
	124, 505, 512, 461, 273, 516, 459, 458, 519, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 509, 439, 448, 109, 446, 199, 178,
	237, 482, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 418, 0, 218, 240, 255, 103, 434, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 430, 433, 428, 429, 477, 478, 524, 525, 526,
	502, 424, 0, 431, 432, 0, 507, 514, 515, 481,
	86, 95, 144, 252, 192, 120, 241, 414, 427, 113,
	437, 0, 0, 450, 455, 456, 468, 470, 471, 472,
	473, 480, 487, 488, 490, 496, 497, 498, 499, 504,
	511, 530, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 518, 506,
	0, 463, 521, 436, 453, 529, 454, 457, 494, 421,
	476, 171, 451, 0, 440, 416, 447, 417, 438, 465,
	115, 469, 435, 508, 479, 520, 143, 441, 527, 145,
	485, 0, 217, 159, 0, 0, 0, 467, 510, 474,
	503, 462, 495, 426, 484, 522, 452, 492, 523, 0,
	0, 0, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 489, 517, 449, 491, 493,
	415, 486, 0, 419, 422, 528, 513, 444, 445, 0,
	0, 0, 0, 0, 0, 0, 466, 475, 500, 460,
	0, 0, 0, 0, 0, 0, 976, 0, 442, 0,
	483, 0, 0, 0, 423, 420, 0, 0, 464, 0,
	0, 0, 425, 0, 443, 501, 0, 413, 124, 505,
	512, 461, 273, 516, 459, 458, 519, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 509, 439, 448, 109, 446, 199, 178, 237, 482,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 418,
	0, 218, 240, 255, 103, 434, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 430,
	433, 428, 429, 477, 478, 524, 525, 526, 502, 424,
	0, 431, 432, 0, 507, 514, 515, 481, 86, 95,
	144, 252, 192, 120, 241, 414, 427, 113, 437, 0,
	0, 450, 455, 456, 468, 470, 471, 472, 473, 480,
	487, 488, 490, 496, 497, 498, 499, 504, 511, 530,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 518, 506, 0, 463,
	521, 436, 453, 529, 454, 457, 494, 421, 476, 171,
	451, 0, 440, 416, 447, 417, 438, 465, 115, 469,
	435, 508, 479, 520, 143, 441, 527, 145, 485, 0,
	217, 159, 0, 0, 0, 467, 510, 474, 503, 462,
	495, 426, 484, 522, 452, 492, 523, 0, 0, 0,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 489, 517, 449, 491, 493, 415, 486,
	0, 419, 422, 528, 513, 444, 445, 0, 0, 0,
	0, 0, 0, 0, 466, 475, 500, 460, 0, 0,
	0, 0, 0, 0, 871, 0, 442, 0, 483, 0,
	0, 0, 423, 420, 0, 0, 464, 0, 0, 0,
	425, 0, 443, 501, 0, 413, 124, 505, 512, 461,
	273, 516, 459, 458, 519, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 509,
	439, 448, 109, 446, 199, 178, 237, 482, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 418, 0, 218,
	240, 255, 103, 434, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 430, 433, 428,
	429, 477, 478, 524, 525, 526, 502, 424, 0, 431,
	432, 0, 507, 514, 515, 481, 86, 95, 144, 252,
	192, 120, 241, 414, 427, 113, 437, 0, 0, 450,
	455, 456, 468, 470, 471, 472, 473, 480, 487, 488,
	490, 496, 497, 498, 499, 504, 511, 530, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 518, 506, 0, 463, 521, 436,
	453, 529, 454, 457, 494, 421, 476, 171, 451, 0,
	440, 416, 447, 417, 438, 465, 115, 469, 435, 508,
	479, 520, 143, 441, 527, 145, 485, 0, 217, 159,
	0, 0, 0, 467, 510, 474, 503, 462, 495, 426,
	484, 522, 452, 492, 523, 0, 0, 0, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 489, 517, 449, 491, 493, 415, 486, 0, 419,
	422, 528, 513, 444, 445, 0, 0, 0, 0, 0,
	0, 0, 466, 475, 500, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 483, 0, 0, 0,
	423, 420, 0, 0, 464, 0, 0, 0, 425, 0,
	443, 501, 0, 413, 124, 505, 512, 461, 273, 516,
	459, 458, 519, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 509, 439, 448,
	109, 446, 199, 178, 237, 482, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 418, 0, 218, 240, 255,
	103, 434, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 430, 433, 428, 429, 477,
	478, 524, 525, 526, 502, 424, 0, 431, 432, 0,
	507, 514, 515, 481, 86, 95, 144, 252, 192, 120,
	241, 414, 427, 113, 437, 0, 0, 450, 455, 456,
	468, 470, 471, 472, 473, 480, 487, 488, 490, 496,
	497, 498, 499, 504, 511, 530, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 518, 506, 0, 463, 521, 436, 453, 529,
	454, 457, 494, 421, 476, 171, 451, 0, 440, 416,
	447, 417, 438, 465, 115, 469, 435, 508, 479, 520,
	143, 441, 527, 145, 485, 0, 217, 159, 0, 0,
	0, 467, 510, 474, 503, 462, 495, 426, 484, 522,
	452, 492, 523, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 489,
	517, 449, 491, 493, 415, 486, 0, 419, 422, 528,
	513, 444, 445, 0, 0, 0, 0, 0, 0, 0,
	466, 475, 500, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 483, 0, 0, 0, 423, 420,
	0, 0, 464, 0, 0, 0, 425, 0, 443, 501,
	0, 413, 124, 505, 512, 461, 273, 516, 459, 458,
	519, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 509, 439, 448, 109, 446,
	199, 178, 237, 482, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 411, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 418, 0, 218, 240, 255, 103, 434,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	412, 410, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 430, 433, 428, 429, 477, 478, 524,
	525, 526, 502, 424, 0, 431, 432, 0, 507, 514,
	515, 481, 86, 95, 144, 252, 192, 120, 241, 414,
	427, 113, 437, 0, 0, 450, 455, 456, 468, 470,
	471, 472, 473, 480, 487, 488, 490, 496, 497, 498,
	499, 504, 511, 530, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	518, 506, 0, 463, 521, 436, 453, 529, 454, 457,
	494, 421, 476, 171, 451, 0, 440, 416, 447, 417,
	438, 465, 115, 469, 435, 508, 479, 520, 143, 441,
	527, 145, 485, 0, 217, 159, 0, 0, 0, 467,
	510, 474, 503, 462, 495, 426, 484, 522, 452, 492,
	523, 0, 0, 0, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 489, 517, 449,
	491, 493, 415, 486, 0, 419, 422, 528, 513, 444,
	445, 0, 0, 0, 0, 0, 0, 0, 466, 475,
	500, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 483, 0, 0, 0, 423, 420, 0, 0,
	464, 0, 0, 0, 425, 0, 443, 501, 0, 413,
	124, 505, 512, 461, 273, 516, 459, 458, 519, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 509, 439, 448, 109, 446, 199, 178,
	237, 482, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 728, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 411,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 418, 0, 218, 240, 255, 103, 434, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 412, 410,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 430, 433, 428, 429, 477, 478, 524, 525, 526,
	502, 424, 0, 431, 432, 0, 507, 514, 515, 481,
	86, 95, 144, 252, 192, 120, 241, 414, 427, 113,
	437, 0, 0, 450, 455, 456, 468, 470, 471, 472,
	473, 480, 487, 488, 490, 496, 497, 498, 499, 504,
	511, 530, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 518, 506,
	0, 463, 521, 436, 453, 529, 454, 457, 494, 421,
	476, 171, 451, 0, 440, 416, 447, 417, 438, 465,
	115, 469, 435, 508, 479, 520, 143, 441, 527, 145,
	485, 0, 217, 159, 0, 0, 0, 467, 510, 474,
	503, 462, 495, 426, 484, 522, 452, 492, 523, 0,
	0, 0, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 489, 517, 449, 491, 493,
	415, 486, 0, 419, 422, 528, 513, 444, 445, 0,
	0, 0, 0, 0, 0, 0, 466, 475, 500, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	483, 0, 0, 0, 423, 420, 0, 0, 464, 0,
	0, 0, 425, 0, 443, 501, 0, 413, 124, 505,
	512, 461, 273, 516, 459, 458, 519, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 509, 439, 448, 109, 446, 199, 178, 237, 482,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 402, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 411, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 418,
	0, 218, 240, 255, 103, 434, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 412, 410, 405, 404,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 430,
	433, 428, 429, 477, 478, 524, 525, 526, 502, 424,
	0, 431, 432, 0, 507, 514, 515, 481, 86, 95,
	144, 252, 192, 120, 241, 414, 427, 113, 437, 0,
	0, 450, 455, 456, 468, 470, 471, 472, 473, 480,
	487, 488, 490, 496, 497, 498, 499, 504, 511, 530,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 907,
	0, 336, 0, 0, 0, 115, 0, 333, 0, 0,
	0, 143, 908, 376, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 83, 84, 85,
	355, 354, 357, 358, 359, 360, 0, 0, 105, 356,
	361, 362, 363, 0, 0, 0, 331, 348, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 327, 0, 0, 0, 390, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 389, 0, 0, 273, 0, 0,
	387, 0, 190, 0, 221, 127, 142, 101, 139, 87,
	97, 0, 126, 168, 197, 201, 0, 0, 0, 109,
	0, 199, 178, 237, 0, 180, 198, 146, 227, 191,
	236, 246, 247, 224, 244, 251, 214, 90, 223, 235,
	106, 209, 92, 233, 220, 157, 136, 137, 91, 0,
	195, 114, 122, 111, 170, 230, 231, 110, 254, 98,
	243, 94, 99, 242, 164, 226, 234, 158, 151, 93,
	232, 156, 150, 141, 118, 129, 188, 148, 189, 130,
	161, 160, 162, 0, 0, 0, 218, 240, 255, 103,
	0, 225, 249, 250, 0, 0, 104, 123, 117, 187,
	121, 163, 100, 132, 215, 140, 147, 194, 253, 177,
	200, 107, 239, 216, 377, 388, 383, 384, 381, 382,
	380, 379, 378, 391, 369, 370, 371, 372, 374, 0,
	385, 386, 373, 86, 95, 144, 252, 192, 120, 241,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 96, 102, 108,
	112, 116, 119, 125, 128, 131, 133, 134, 135, 138,
	149, 152, 153, 154, 155, 165, 166, 167, 169, 172,
	173, 174, 175, 176, 179, 181, 182, 183, 184, 185,
	186, 193, 196, 202, 203, 204, 205, 206, 207, 208,
	210, 211, 212, 213, 219, 222, 228, 229, 238, 245,
	248, 171, 0, 0, 0, 0, 336, 0, 0, 0,
	115, 0, 333, 0, 0, 0, 143, 0, 376, 145,
	0, 0, 217, 159, 0, 0, 0, 0, 0, 367,
	368, 0, 0, 0, 0, 0, 0, 983, 0, 55,
	0, 0, 83, 84, 85, 355, 354, 357, 358, 359,
	360, 0, 0, 105, 356, 361, 362, 363, 984, 0,
	0, 331, 348, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 346, 0, 0, 0, 0,
	390, 0, 347, 0, 0, 342, 343, 344, 349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 389,
	0, 0, 273, 0, 0, 387, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 377,
	388, 383, 384, 381, 382, 380, 379, 378, 391, 369,
	370, 371, 372, 374, 0, 385, 386, 373, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 336, 0, 0, 0, 115, 0, 333, 0, 0,
	0, 143, 0, 376, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 598, 83, 84, 85,
	355, 354, 357, 358, 359, 360, 0, 0, 105, 356,
	361, 362, 363, 0, 0, 0, 331, 348, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 390, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 389, 0, 0, 273, 0, 0,
	387, 0, 190, 0, 221, 127, 142, 101, 139, 87,
	97, 0, 126, 168, 197, 201, 0, 0, 0, 109,
	0, 199, 178, 237, 0, 180, 198, 146, 227, 191,
	236, 246, 247, 224, 244, 251, 214, 90, 223, 235,
	106, 209, 92, 233, 220, 157, 136, 137, 91, 0,
	195, 114, 122, 111, 170, 230, 231, 110, 254, 98,
	243, 94, 99, 242, 164, 226, 234, 158, 151, 93,
	232, 156, 150, 141, 118, 129, 188, 148, 189, 130,
	161, 160, 162, 0, 0, 0, 218, 240, 255, 103,
	0, 225, 249, 250, 0, 0, 104, 123, 117, 187,
	121, 163, 100, 132, 215, 140, 147, 194, 253, 177,
	200, 107, 239, 216, 377, 388, 383, 384, 381, 382,
	380, 379, 378, 391, 369, 370, 371, 372, 374, 0,
	385, 386, 373, 86, 95, 144, 252, 192, 120, 241,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 96, 102, 108,
	112, 116, 119, 125, 128, 131, 133, 134, 135, 138,
	149, 152, 153, 154, 155, 165, 166, 167, 169, 172,
	173, 174, 175, 176, 179, 181, 182, 183, 184, 185,
	186, 193, 196, 202, 203, 204, 205, 206, 207, 208,
	210, 211, 212, 213, 219, 222, 228, 229, 238, 245,
	248, 171, 0, 0, 0, 0, 336, 0, 0, 0,
	115, 0, 333, 0, 0, 0, 143, 0, 376, 145,
	0, 0, 217, 159, 0, 0, 0, 0, 0, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 83, 84, 85, 355, 354, 357, 358, 359,
	360, 0, 0, 105, 356, 361, 362, 363, 0, 0,
	0, 331, 348, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 346, 327, 0, 0, 0,
	390, 0, 347, 0, 0, 342, 343, 344, 349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 389,
	0, 0, 273, 0, 0, 387, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 377,
	388, 383, 384, 381, 382, 380, 379, 378, 391, 369,
	370, 371, 372, 374, 0, 385, 386, 373, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 336, 0, 0, 0, 115, 0, 333, 0, 0,
	0, 143, 0, 376, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 83, 84, 85,
	355, 922, 357, 358, 359, 360, 0, 0, 105, 356,
	361, 362, 363, 0, 0, 0, 331, 348, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 327, 0, 0, 0, 390, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 389, 0, 0, 273, 0, 0,
	387, 0, 190, 0, 221, 127, 142, 101, 139, 87,
	97, 0, 126, 168, 197, 201, 0, 0, 0, 109,
	0, 199, 178, 237, 0, 180, 198, 146, 227, 191,
	236, 246, 247, 224, 244, 251, 214, 90, 223, 235,
	106, 209, 92, 233, 220, 157, 136, 137, 91, 0,
	195, 114, 122, 111, 170, 230, 231, 110, 254, 98,
	243, 94, 99, 242, 164, 226, 234, 158, 151, 93,
	232, 156, 150, 141, 118, 129, 188, 148, 189, 130,
	161, 160, 162, 0, 0, 0, 218, 240, 255, 103,
	0, 225, 249, 250, 0, 0, 104, 123, 117, 187,
	121, 163, 100, 132, 215, 140, 147, 194, 253, 177,
	200, 107, 239, 216, 377, 388, 383, 384, 381, 382,
	380, 379, 378, 391, 369, 370, 371, 372, 374, 0,
	385, 386, 373, 86, 95, 144, 252, 192, 120, 241,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 96, 102, 108,
	112, 116, 119, 125, 128, 131, 133, 134, 135, 138,
	149, 152, 153, 154, 155, 165, 166, 167, 169, 172,
	173, 174, 175, 176, 179, 181, 182, 183, 184, 185,
	186, 193, 196, 202, 203, 204, 205, 206, 207, 208,
	210, 211, 212, 213, 219, 222, 228, 229, 238, 245,
	248, 171, 0, 0, 0, 0, 336, 0, 0, 0,
	115, 0, 333, 0, 0, 0, 143, 0, 376, 145,
	0, 0, 217, 159, 0, 0, 0, 0, 0, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 83, 84, 85, 355, 919, 357, 358, 359,
	360, 0, 0, 105, 356, 361, 362, 363, 0, 0,
	0, 331, 348, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 346, 327, 0, 0, 0,
	390, 0, 347, 0, 0, 342, 343, 344, 349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 389,
	0, 0, 273, 0, 0, 387, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 377,
	388, 383, 384, 381, 382, 380, 379, 378, 391, 369,
	370, 371, 372, 374, 0, 385, 386, 373, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	0, 0, 0, 336, 0, 0, 0, 115, 0, 333,
	0, 0, 0, 143, 0, 376, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 83,
	84, 85, 355, 354, 357, 358, 359, 360, 0, 0,
	105, 356, 361, 362, 363, 0, 0, 0, 331, 348,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 346, 0, 0, 0, 0, 390, 0, 347,
	0, 0, 342, 343, 344, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 389, 0, 0, 273,
	0, 0, 387, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 377, 388, 383, 384,
	381, 382, 380, 379, 378, 391, 369, 370, 371, 372,
	374, 0, 385, 386, 373, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 336, 0,
	0, 0, 115, 0, 333, 0, 0, 0, 143, 0,
	376, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 83, 84, 85, 355, 354, 357,
	358, 359, 360, 0, 0, 105, 356, 361, 362, 363,
	0, 0, 0, 331, 348, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 346, 0, 0,
	0, 0, 390, 0, 347, 0, 0, 342, 343, 344,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 389, 0, 0, 273, 0, 0, 387, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 377, 388, 383, 384, 381, 382, 380, 379, 378,
	391, 369, 370, 371, 372, 374, 0, 385, 386, 373,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 376, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 83,
	84, 85, 355, 354, 357, 358, 359, 360, 0, 0,
	105, 356, 361, 362, 363, 0, 0, 0, 0, 348,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 346, 0, 0, 0, 0, 390, 0, 347,
	0, 0, 342, 343, 344, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 389, 0, 0, 273,
	0, 0, 387, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 1548, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 377, 388, 383, 384,
	381, 382, 380, 379, 378, 391, 369, 370, 371, 372,
	374, 0, 385, 386, 373, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 143, 0,
	376, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 598, 83, 84, 85, 355, 354, 357,
	358, 359, 360, 0, 0, 105, 356, 361, 362, 363,
	0, 0, 0, 0, 348, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 346, 0, 0,
	0, 0, 390, 0, 347, 0, 0, 342, 343, 344,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 389, 0, 0, 273, 0, 0, 387, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 377, 388, 383, 384, 381, 382, 380, 379, 378,
	391, 369, 370, 371, 372, 374, 0, 385, 386, 373,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 376, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 83,
	84, 85, 355, 354, 357, 358, 359, 360, 0, 0,
	105, 356, 361, 362, 363, 0, 0, 0, 0, 348,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 346, 0, 0, 0, 0, 390, 0, 347,
	0, 0, 342, 343, 344, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 389, 0, 0, 273,
	0, 0, 387, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 377, 388, 383, 384,
	381, 382, 380, 379, 378, 391, 369, 370, 371, 372,
	374, 0, 385, 386, 373, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 143, 0,
	0, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 634, 644, 645, 637, 638, 639, 640,
	641, 642, 643, 636, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 273, 0, 0, 0, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 623, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 625, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 620, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 273,
	0, 0, 0, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 143, 0,
	0, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 77, 78, 0, 74, 0, 0, 0, 79, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 966, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 968, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 273,
	0, 0, 0, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 25, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 966, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 85, 0, 968, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 273, 0, 0, 0, 0, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	0, 0, 0, 109, 0, 199, 178, 237, 0, 964,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 235, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 99, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 0, 0,
	218, 240, 255, 103, 0, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 163, 100, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 95, 144,
	252, 192, 120, 241, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	0, 856, 0, 0, 857, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 738, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 85, 0, 737, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 273, 0, 0, 0, 0, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	0, 0, 0, 109, 0, 199, 178, 237, 0, 180,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 235, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 99, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 0, 0,
	218, 240, 255, 103, 0, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 163, 100, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 95, 144,
	252, 192, 120, 241, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 273, 0, 0, 0, 0, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	0, 0, 0, 109, 0, 199, 178, 237, 0, 180,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 235, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 99, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 0, 0,
	218, 240, 255, 103, 0, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 163, 100, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 95, 144,
	252, 192, 120, 241, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	968, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 85, 0, 625, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 273, 0, 0, 0, 0, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	0, 0, 0, 109, 0, 199, 178, 237, 0, 180,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 235, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 99, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 0, 0,
	218, 240, 255, 103, 0, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 163, 100, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 95, 144,
	252, 192, 120, 241, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 171, 0, 0, 0, 0,
	0, 0, 0, 708, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	394, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 143, 0, 0, 145, 0, 0, 217, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 273, 0,
	0, 0, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 143, 0, 0,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 268, 0, 273, 0, 0, 0, 0, 190, 0,
	221, 127, 142, 101, 139, 87, 97, 0, 126, 168,
	197, 201, 0, 0, 0, 109, 0, 199, 178, 237,
	0, 180, 198, 146, 227, 191, 236, 246, 247, 224,
	244, 251, 214, 90, 223, 235, 106, 209, 92, 233,
	220, 157, 136, 137, 91, 0, 195, 114, 122, 111,
	170, 230, 231, 110, 254, 98, 243, 94, 99, 242,
	164, 226, 234, 158, 151, 93, 232, 156, 150, 141,
	118, 129, 188, 148, 189, 130, 161, 160, 162, 0,
	0, 0, 218, 240, 255, 103, 0, 225, 249, 250,
	0, 0, 104, 123, 117, 187, 121, 163, 100, 132,
	215, 140, 147, 194, 253, 177, 200, 107, 239, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	95, 144, 252, 192, 120, 241, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 96, 102, 108, 112, 116, 119, 125,
	128, 131, 133, 134, 135, 138, 149, 152, 153, 154,
	155, 165, 166, 167, 169, 172, 173, 174, 175, 176,
	179, 181, 182, 183, 184, 185, 186, 193, 196, 202,
	203, 204, 205, 206, 207, 208, 210, 211, 212, 213,
	219, 222, 228, 229, 238, 245, 248, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 143, 0, 0, 145, 0, 0, 217, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 273, 0,
	0, 0, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248,
}
var yyPact = [...]int{

	2927, -1000, -275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 958, 977, -1000, -1000, -1000, -1000, -1000,
	-1000, 281, 11635, 46, 125, -22, 15674, 124, 76, 16009,
	-1000, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -83,
	-84, -1000, 745, -1000, -1000, -1000, -1000, -1000, 949, 956,
	756, 944, 913, -1000, 8273, 87, 87, 15339, 6933, -1000,
	-1000, 350, 16009, 117, 16009, -152, 85, 85, 85, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 111, 16009, 525, 525,
	259, -1000, 16009, 83, 525, 83, 83, 83, 16009, -1000,
	175, -1000, -1000, -1000, 16009, 525, 886, 307, 62, 4497,
	-1000, 198, -1000, 4497, 21, 4497, -47, 967, 18, -26,
	-1000, 4497, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 498, 884, 9625, 9625,
	958, -1000, 745, -1000, -1000, -1000, 826, 8273, -1000, -1000,
	824, -1000, -1000, -1000, -1000, 381, 975, -1000, 11300, 173,
	-1000, 9625, 418, 574, -1000, -1000, 574, -1000, -1000, 144,
	-1000, -1000, 10630, 10630, 10630, 10630, 10630, 10630, 10630, 10630,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 574, -1000, 9290, 574, 574, 574,
	574, 574, 574, 574, 574, 9625, 574, 574, 574, 574,
	574, 574, 574, 574, 574, 574, 574, 574, 574, 574,
	574, 574, 14997, 13992, 16009, 702, 678, -1000, -1000, 171,
	687, 6585, -111, -1000, -1000, -1000, 263, 13322, -1000, -1000,
	-1000, 883, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 648, 16009, -1000, 1561, -1000, 525, 4497, 104, 525,
	311, 525, 16009, 16009, 4497, 4497, 4497, 36, 71, 58,
	16009, 682, 102, 16009, 936, 787, 16009, 525, 525, -1000,
	5889, -1000, 4497, 307, -1000, 487, 9625, 4497, 4497, 4497,
	16009, 4497, 4497, -1000, -1000, -1000, 303, -1000, -1000, -1000,
	-1000, 4497, 4497, -1000, 974, 294, -1000, -1000, -1000, -1000,
	9625, 226, -1000, 786, -1000, -1000, -1000, -1000, -1000, -1000,
	984, 207, 517, 162, 679, -1000, 503, 949, 498, 824,
	12987, 709, -1000, 824, -1000, -1000, -1000, 16009, -1000, 9625,
	9625, 458, -1000, 14662, -1000, -1000, 5541, 242, 10630, 392,
	357, 10630, 10630, 10630, 10630, 10630, 10630, 10630, 10630, 10630,
	10630, 10630, 10630, 10630, 10630, 10630, 566, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 525, -1000, 745, 550, 550,
	184, 184, 184, 184, 184, 184, 184, 10965, 7268, 498,
	642, 293, 9290, 8273, 8273, 9625, 9625, 8943, 8608, 8273,
	880, 299, 293, 16009, -1000, -1000, 10295, -1000, -1000, -1000,
	-1000, -1000, 498, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16009, 16009, 8273, 8273, 8273, 8273, 8273, 53, 16009, -1000,
	689, 776, -1000, -1000, -1000, 939, 12317, 12652, 53, 677,
	13992, 16009, -1000, -1000, 13992, 16009, 5193, 6237, -111, -1000,
	653, -1000, -118, -122, 7603, 183, -1000, -1000, -1000, -1000,
	4149, 313, 534, 326, -78, -1000, -1000, -1000, 711, -1000,
	711, 711, 711, 711, -27, -27, -27, -27, -1000, -1000,
	-1000, -1000, -1000, 731, 727, -1000, 711, 711, 711, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 724, 724, 724,
	714, 714, 703, -1000, 16009, 4497, 934, 4497, -1000, 72,
	-1000, -1000, -1000, 16009, 16009, 16009, 16009, 16009, 132, 16009,
	16009, 674, -1000, 16009, 4497, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 293, -1000, -1000, -1000, -1000, -1000, -1000,
	16009, -1000, -1000, -1000, -1000, 16009, 307, 16009, 16009, 293,
	-1000, 478, 16009, -1000, 823, 9625, 9625, 5889, 9625, -1000,
	-1000, -1000, 884, -1000, 951, -1000, 850, 835, 966, 8273,
	13992, 824, -1000, 242, 310, -1000, -1000, 504, -1000, -1000,
	-1000, -1000, 161, 574, -1000, 1871, -1000, -1000, -1000, -1000,
	392, 10630, 10630, 10630, 260, 1871, 1818, 773, 572, 184,
	328, 328, 277, 277, 277, 277, 277, 383, 383, -1000,
	-1000, -1000, 498, -1000, -1000, -1000, 498, 8273, 8273, 667,
	-1000, 9625, -1000, 498, 638, 638, 385, 512, 279, 973,
	638, 274, 972, 638, 638, 8273, -1000, -1000, 331, -1000,
	9625, 498, -1000, 158, -1000, 319, 666, 658, 638, 498,
	498, 638, 638, 681, 574, -1000, 16009, 13992, 13992, 13992,
	13992, 13992, -1000, 812, 811, -1000, 800, 798, 804, 16009,
	-1000, 640, 12317, 168, 574, -1000, 14327, -1000, -1000, 966,
	13992, 655, -1000, 655, -1000, 157, -1000, -1000, 653, -111,
	-115, -1000, -1000, -1000, -1000, 293, -1000, 573, 602, 3801,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 720, 525, -1000,
	914, 211, 222, 525, 910, -1000, -1000, -1000, 889, -1000,
	371, -86, -1000, -1000, 419, -27, -27, -1000, -1000, 183,
	876, 183, 183, 183, 476, 476, -1000, -1000, -1000, -1000,
	417, -1000, -1000, -1000, 411, -1000, 783, 16009, 4497, -1000,
	-1000, -1000, -1000, 188, 188, 218, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 50, 690, -1000,
	-1000, -1000, -1000, 3, 27, 97, -1000, 4497, -1000, 294,
	294, -1000, -1000, -1000, -1000, -1000, 819, 293, 293, 152,
	-1000, -1000, 16009, -1000, -1000, -1000, -1000, 963, 9625, -1000,
	593, -1000, -1000, -1000, -1000, 4845, 8273, -1000, 260, 1871,
	1751, -1000, 10630, 10630, -1000, -1000, 638, 638, 293, -1000,
	-1000, -1000, 17, 566, 17, 10630, 10630, -1000, 10630, 10630,
	-1000, -167, 693, 268, -1000, 9625, 472, -1000, 5889, -1000,
	10630, 10630, -1000, -1000, -1000, -1000, -1000, 778, 16009, 574,
	-1000, 12317, 16009, 695, -1000, 261, 776, 780, 774, 598,
	-1000, -1000, -1000, -1000, 808, -1000, 802, -1000, -1000, -1000,
	-1000, -1000, 116, 114, 113, 16009, -1000, 958, 655, -1000,
	-1000, 215, -1000, -1000, -130, -132, -1000, -1000, -1000, 4149,
	-1000, 4149, 16009, 68, -1000, 525, 525, -1000, -1000, -1000,
	715, 765, 10630, -1000, -1000, -1000, 523, 183, 183, -1000,
	346, -1000, -1000, -1000, 636, -1000, 634, 578, 624, 16009,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16009,
	-1000, -1000, -1000, -1000, -1000, 16009, -177, 525, 16009, 16009,
	16009, 16009, -1000, 307, 307, -1000, 5889, -1000, 960, 952,
	293, -1000, -1000, 498, -1000, 10630, 1871, 1871, -1000, -1000,
	498, 711, 711, -1000, 711, 714, -1000, 711, 0, 711,
	-1, 498, 498, 1700, 1541, 1503, 1183, 574, -161, -1000,
	293, 9625, -1000, 1019, 825, -1000, 916, 533, 538, -1000,
	-1000, 7938, 498, 608, 148, 606, -1000, 958, 16009, 9625,
	-1000, -1000, 9625, 712, -1000, 9625, -1000, -1000, -1000, 574,
	574, 574, 606, 949, -1000, -1000, -1000, -1000, 3801, -1000,
	604, -1000, 711, -1000, -1000, -1000, 16009, -60, 983, 1871,
	-1000, -1000, -1000, -1000, -1000, -27, 448, -27, 407, -1000,
	395, 4497, -1000, -1000, -1000, -1000, 919, -1000, 5889, -1000,
	-1000, 707, 694, -1000, -1000, -1000, -1000, -1000, 9625, 9625,
	-1000, 1871, -1000, -1000, 110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10630, 10630, 10630, 10630, 10630, 949, 440,
	293, 10630, 10630, 909, -1000, 574, -1000, -1000, 708, 16009,
	16009, -1000, 16009, 949, -1000, 293, 293, 16009, 293, 13657,
	16009, 16009, 11970, -1000, 202, 16009, -1000, 600, -1000, 200,
	-1000, -89, 183, -1000, 183, 506, 502, -1000, 574, 571,
	-1000, 256, 16009, 16009, 293, 562, -1000, -1000, 319, 319,
	319, 319, 47, 498, -1000, 319, 319, 982, -1000, 574,
	-1000, 745, 139, -1000, -1000, -1000, 597, 583, -1000, 583,
	583, 168, 202, -1000, 525, 244, 436, -1000, 65, 16009,
	359, 893, -1000, 891, -1000, -1000, -1000, -1000, -1000, 48,
	5889, 4149, 580, -1000, -1000, -1000, -1000, -1000, 498, 51,
	-180, -1000, -1000, -1000, 16009, 538, 498, 16009, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 391, -1000, -1000, 16009, -1000,
	-1000, 429, -1000, -1000, 551, -1000, 16009, -1000, -1000, 690,
	-1000, 817, -175, -188, 518, -1000, -1000, -1000, 692, -1000,
	-1000, 48, 833, -177, -1000, 790, -1000, 16009, -1000, 42,
	-1000, -178, 549, 40, -186, 749, 574, -190, 743, -1000,
	971, 9960, -1000, -1000, 978, 237, 237, 319, 498, -1000,
	-1000, -1000, 73, 425, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1231, 31, 562, 1229, 1228, 1227, 1226, 1225, 1224,
	1223, 1219, 1218, 1217, 1212, 1211, 1209, 1208, 1207, 1206,
	1205, 1204, 1203, 1199, 1198, 1195, 1191, 86, 1185, 1181,
	1179, 1178, 1177, 1176, 1175, 45, 110, 56, 60, 1174,
	55, 2243, 1172, 44, 58, 62, 1171, 34, 1170, 1169,
	77, 1168, 1167, 51, 1165, 1164, 2483, 1162, 76, 1160,
	13, 53, 1159, 1158, 1156, 1154, 70, 254, 1149, 1139,
	14, 1135, 1133, 97, 1132, 54, 18, 16, 21, 19,
	1131, 108, 6, 1128, 48, 1115, 1113, 1110, 1109, 25,
	1107, 63, 1106, 52, 57, 1105, 10, 74, 30, 20,
	8, 1104, 1103, 23, 71, 46, 65, 1102, 1101, 500,
	1100, 1099, 41, 1098, 1097, 1095, 27, 1094, 88, 474,
	1093, 1092, 1091, 1089, 59, 871, 1665, 12, 79, 1088,
	1086, 1085, 2022, 61, 50, 24, 1084, 47, 209, 38,
	1082, 1081, 35, 1080, 1078, 1077, 1075, 1074, 1073, 1072,
	296, 1070, 1067, 1066, 17, 22, 1062, 1061, 64, 26,
	1055, 1054, 1053, 43, 67, 1043, 1041, 49, 1040, 1037,
	28, 1035, 1031, 1030, 1029, 1028, 36, 7, 1022, 15,
	1021, 11, 1020, 29, 1016, 4, 1013, 9, 1008, 3,
	0, 1001, 5, 42, 1, 1000, 2, 998, 996, 1502,
	1237, 66, 995, 85,
}
var yyR1 = [...]int{

	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 190, 190, 190, 2, 2,
	2, 6, 3, 4, 4, 5, 5, 7, 7, 30,
	30, 8, 9, 9, 9, 9, 201, 201, 50, 50,
	51, 51, 97, 97, 10, 11, 11, 106, 106, 105,
	105, 105, 107, 107, 107, 107, 140, 140, 12, 12,
	12, 12, 12, 12, 12, 192, 192, 191, 189, 189,
	188, 188, 187, 18, 172, 174, 174, 173, 173, 173,
	173, 164, 143, 143, 143, 143, 146, 146, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 147, 147, 147, 147, 147, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 149, 149, 149, 149, 149, 149, 149, 149,
	163, 163, 150, 150, 158, 158, 159, 159, 159, 156,
	156, 157, 157, 160, 160, 160, 152, 152, 153, 153,
	161, 161, 154, 154, 154, 155, 155, 155, 162, 162,
	162, 162, 162, 151, 151, 165, 165, 182, 182, 181,
	181, 181, 171, 171, 178, 178, 178, 178, 178, 168,
	168, 168, 169, 169, 167, 167, 170, 170, 180, 180,
	179, 166, 166, 183, 183, 183, 183, 195, 196, 194,
	194, 194, 194, 194, 175, 175, 175, 176, 176, 176,
	177, 177, 177, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 186, 184, 184, 185, 185, 14,
	19, 19, 15, 15, 15, 15, 15, 16, 16, 20,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 113, 113, 115,
	115, 111, 111, 114, 114, 112, 112, 112, 116, 116,
	116, 117, 117, 141, 141, 141, 22, 22, 24, 24,
	25, 26, 23, 23, 23, 23, 23, 23, 23, 17,
	202, 27, 28, 28, 29, 29, 29, 32, 32, 32,
	31, 31, 31, 37, 37, 39, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 36, 36, 38, 38,
	38, 38, 129, 129, 129, 128, 128, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 45, 59, 59, 96,
	96, 98, 98, 46, 46, 46, 46, 47, 47, 48,
	48, 49, 49, 136, 136, 135, 135, 135, 134, 134,
	52, 52, 52, 54, 53, 53, 53, 53, 55, 55,
	57, 57, 56, 56, 58, 60, 60, 60, 60, 60,
	61, 61, 41, 41, 41, 41, 41, 41, 41, 110,
	110, 63, 63, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 74, 74, 74, 74, 74, 74, 64,
	64, 64, 64, 64, 64, 64, 35, 35, 75, 75,
	75, 81, 76, 76, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 71, 71, 71, 71,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 203,
	203, 73, 72, 72, 72, 72, 72, 72, 72, 33,
	33, 33, 33, 33, 139, 139, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 85,
	85, 34, 34, 83, 83, 84, 86, 86, 82, 82,
	82, 66, 66, 66, 66, 66, 66, 66, 66, 68,
	68, 68, 87, 87, 88, 88, 89, 89, 90, 90,
	91, 92, 92, 92, 93, 93, 93, 93, 94, 94,
	94, 65, 65, 65, 65, 65, 65, 95, 95, 95,
	95, 99, 99, 77, 77, 79, 79, 78, 80, 100,
	100, 103, 101, 101, 101, 104, 104, 104, 104, 102,
	102, 102, 131, 131, 131, 108, 108, 118, 118, 119,
	119, 109, 109, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 121, 121, 121, 122, 122, 123, 123,
	123, 130, 130, 126, 126, 127, 127, 132, 132, 133,
	133, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	199, 200, 137, 138, 138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 4, 6,
	7, 5, 8, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 6, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 1, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	8, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 2, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -20, -21, -22, -24, -25,
	-26, -23, -17, -3, -4, 6, 7, -30, 9, 10,
	30, -18, 119, 120, 122, 121, 155, 123, 148, 52,
	169, 170, 172, 173, 25, 149, 150, 153, 154, 31,
	32, 125, -199, 8, 255, 56, -198, 353, -89, 15,
	-29, 5, -27, -202, -27, -27, -27, -27, -27, -172,
	-174, 56, 94, -123, 129, 76, 247, 126, 127, 133,
	-126, -190, -125, 59, 60, 61, 265, 141, 297, 298,
	169, 180, 174, 201, 193, 266, 299, 142, 191, 194,
	234, 139, 300, 221, 228, 70, 172, 243, 301, 151,
	189, 185, 302, 274, 183, 27, 303, 230, 206, 304,
	270, 232, 184, 229, 125, 305, 144, 137, 306, 207,
	211, 307, 235, 308, 309, 310, 178, 179, 311, 140,
	237, 205, 138, 33, 267, 36, 159, 238, 209, 312,
	204, 200, 313, 314, 315, 316, 203, 177, 199, 40,
	213, 212, 214, 233, 196, 317, 318, 319, 145, 320,
	186, 18, 321, 322, 323, 324, 325, 241, 154, 326,
	157, 327, 328, 329, 330, 331, 332, 231, 208, 210,
	134, 161, 269, 333, 239, 182, 334, 146, 158, 153,
	242, 147, 335, 336, 337, 338, 339, 340, 341, 173,
	342, 343, 344, 345, 168, 236, 245, 39, 218, 346,
	176, 136, 347, 170, 165, 223, 197, 160, 348, 349,
	187, 188, 202, 175, 198, 171, 162, 155, 350, 244,
	219, 271, 195, 192, 166, 351, 163, 164, 352, 224,
	225, 167, 268, 240, 190, 220, -109, 129, 247, 126,
	225, 131, 127, 127, 128, 129, 247, 126, 127, -56,
	-132, -190, -125, 129, 127, 112, 194, 234, 119, 222,
	230, -115, 231, 161, -141, 127, -111, 221, 224, 225,
	167, -190, 232, 236, 235, 226, -132, 171, -137, -137,
	-137, -137, -137, 223, 223, -137, -2, -93, 17, 16,
	-5, -3, -199, 6, 20, 21, -32, -39, 41, 42,
	-40, 21, 34, 45, 43, -28, -38, 103, -41, -132,
	-62, 78, -67, 29, -190, -125, 23, -66, -63, -82,
	-80, -81, 112, 113, 114, 101, 102, 109, 79, 115,
	-71, -69, -70, -72, 63, 62, 71, 64, 65, 66,
	67, 72, 73, 74, -126, -78, -199, 46, 47, 256,
	257, 258, 259, 264, 260, 81, 35, 246, 254, 253,
	252, 250, 251, 248, 249, 262, 263, 132, 247, 126,
	107, 255, -109, -109, 11, -50, -51, -56, -58, -132,
	-101, -140, 171, -104, 236, 235, -127, -102, -126, -124,
	234, 194, 233, 124, 272, 77, 22, 24, 216, 80,
	112, 16, 81, 111, 256, 119, 50, 273, 248, 249,
	246, 258, 259, 247, 222, 29, 10, 275, 25, 149,
	21, 34, 105, 121, 84, 85, 152, 23, 150, 74,
	278, 19, 53, 11, 13, 279, 280, 14, 132, 131,
	96, 128, 48, 8, 115, 26, 93, 44, 281, 28,
	282, 283, 284, 285, 46, 94, 17, 250, 251, 31,
	286, 264, 156, 107, 51, 37, 78, 287, 288, 72,
	289, 75, 54, 76, 15, 49, 290, 291, 292, 293,
	95, 122, 255, 47, 294, 126, 6, 261, 30, 148,
	45, 295, 127, 83, 262, 263, 130, 73, 5, 133,
	32, 9, 52, 55, 252, 253, 254, 35, 82, 12,
	296, -173, 94, -164, -190, -56, 128, -56, 255, -119,
	132, -119, -119, 127, -56, -190, -190, 119, 121, 124,
	54, -19, -56, -118, 132, -190, -118, -118, -118, -56,
	116, -56, -190, 30, -116, 94, 12, 247, -190, 161,
	127, 162, 129, -138, -199, -127, -168, 128, 33, 140,
	-138, 165, 166, -138, -114, -113, 228, 229, 223, 227,
	12, 166, 223, 164, -138, -137, -137, -200, 58, -94,
	19, 31, -41, -132, -90, -91, -41, -89, -2, -27,
	37, -36, -38, -40, 41, 42, 69, 11, -129, 77,
	76, 93, -128, 22, -126, 63, 116, -41, -64, 96,
	78, 94, 95, 80, 98, 97, 108, 101, 102, 103,
	104, 105, 106, 107, 99, 100, 111, 86, 87, 88,
	89, 90, 91, 92, -110, -199, -81, -199, 117, 118,
	-67, -67, -67, -67, -67, -67, -67, -67, -199, -2,
	-76, -41, -199, -199, -199, -199, -199, -199, -199, -199,
	-199, -85, -41, -199, -203, -73, -199, -203, -73, -203,
	-73, -203, -199, -203, -73, -203, -73, -203, -203, -73,
	-199, -199, -199, -199, -199, -199, -199, -57, 26, -56,
	-43, -44, -45, -46, -59, -81, -199, -56, -56, -50,
	-201, 57, 11, 55, -201, 57, 116, 57, 171, -104,
	-106, -105, 237, 239, 86, -131, -126, 63, 29, 30,
	58, 57, -56, -143, -146, -148, -147, -149, -144, -145,
	191, 192, 112, 195, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 30, 151, 187, 188, 189, 190,
	207, 208, 209, 210, 211, 212, 213, 214, 174, 193,
	266, 175, 176, 177, 178, 179, 180, 182, 183, 184,
	185, 186, -190, -138, 129, -190, 78, -190, -56, -56,
	-138, -138, -138, 163, 163, 127, 127, 168, -56, 57,
	130, -50, 23, 54, -56, -190, -190, -133, -132, -124,
	-138, -116, 63, -41, -138, -138, -138, -56, -138, -138,
	-169, 11, 96, -138, -138, 11, -112, 11, 96, -41,
	-117, 94, 54, 9, 96, 57, 18, 116, 57, -92,
	24, 25, -93, -200, -68, -126, 64, 67, -42, 57,
	11, -40, -56, -41, -41, -74, 72, 78, 73, 74,
	-128, 103, -133, -127, -124, -67, -75, -78, -81, 68,
	96, 94, 95, 80, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -139,
	-190, 63, -190, -66, -66, -126, -37, 21, 34, -36,
	-200, 57, -200, -2, -36, -36, -41, -41, -82, 63,
	-36, -82, 63, -36, -36, -31, 21, 34, -83, -84,
	82, -82, -126, -132, -200, -67, -126, -126, -36, -37,
	-37, -36, -36, -97, 157, -56, 30, 57, -52, -54,
	-53, -55, 44, 48, 50, 45, 46, 47, 51, -136,
	22, -43, -199, -135, 157, -134, 22, -132, 63, -97,
	55, -43, -56, -43, -58, -132, 103, -104, -106, 57,
	238, 240, 241, 54, 75, -41, -155, 111, -175, -176,
	-177, -127, 63, 64, -164, -165, -166, -178, 143, -183,
	134, 136, 133, -167, 144, 128, 28, 58, -160, 72,
	78, -156, 219, -150, 56, -150, -150, -150, -150, -154,
	194, -154, -154, -154, 56, 56, -150, -150, -150, -158,
	56, -158, -158, -159, 56, -159, -130, 55, -56, -138,
	23, -138, -120, 124, 121, 122, -186, 120, 216, 194,
	70, 29, 15, 256, 157, 271, -190, 158, -56, -56,
	-56, -56, -56, 124, 121, -56, -56, -56, -138, -56,
	-56, -116, -132, -132, 63, -56, 39, -41, -41, -133,
	-91, -94, -108, 19, 11, 35, 35, -61, 12, -38,
	-43, -40, 72, 73, 74, 116, -199, -75, -67, -67,
	-67, -35, 152, 77, -200, -200, -36, -36, -41, -200,
	-200, -200, 57, 55, 22, 11, 11, -200, 11, 11,
	-200, -200, -36, -86, -84, 84, -41, -200, 116, -200,
	57, 57, -200, -200, -200, -200, -200, -65, 30, 35,
	-2, -199, -199, -100, -103, -82, -44, -45, -45, -44,
	-45, 44, 44, 44, 49, 44, 49, 44, -53, -132,
	-200, -60, 52, 131, 53, -199, -134, -61, -43, -61,
	-61, 116, -105, -107, 242, 239, 245, -190, 63, 57,
	-177, 86, 56, -190, 28, -167, -167, -170, -190, -170,
	28, -152, 29, 72, -157, 220, 64, -154, -154, -155,
	30, -155, -155, -155, -163, 63, -163, 64, 64, 54,
	-126, -138, -137, -193, 139, 135, 143, 144, 137, 59,
	60, 61, 128, 28, 134, 136, 157, 133, -193, -121,
	-122, 130, 22, 128, 28, 157, -192, 55, 163, 216,
	163, 130, -138, -112, -112, 40, 116, -56, -87, 13,
	-41, 103, -127, -37, -35, 77, -67, -67, -200, -200,
	-142, 112, 191, 151, 189, 185, 205, 196, 218, 187,
	219, -139, -142, -67, -67, -67, -67, 265, -89, 85,
	-41, 83, -127, -67, -67, -99, 54, -100, -77, -79,
	-78, -199, -2, -95, -126, -98, -126, -61, 57, 86,
	-48, -47, 54, 55, -49, 54, -47, 44, 44, 128,
	128, 128, -98, -89, -61, 239, 243, 244, -176, -177,
	-180, -179, -126, -183, -170, -170, 56, -153, 54, -67,
	58, -155, -155, -190, 112, 58, 57, 58, 57, 58,
	57, -56, -137, -137, -56, -137, -126, -189, 268, -191,
	-190, -126, -126, -126, -56, -116, -116, -88, 14, 16,
	-200, -67, -200, -150, -150, -150, -159, -150, 179, -150,
	179, -200, -200, 19, 19, 19, 19, -199, -34, 261,
	-41, 57, 57, 27, -99, 57, -200, -200, -200, 57,
	116, -200, 57, -89, -103, -41, -41, 56, -41, -199,
	-199, -199, -200, -93, 58, 57, -150, -96, -126, -161,
	216, 9, -154, 63, -154, 64, 64, -138, 26, -188,
	-187, -127, 56, 55, -41, -76, -154, -190, -67, -67,
	-67, -67, -67, -93, 63, -67, -67, 28, -79, 35,
	-2, -199, -126, -126, -126, -93, -96, -96, -200, -96,
	-96, -135, -182, -181, 55, 138, 70, -179, 58, 57,
	-162, 134, 28, 133, -70, -155, -155, 58, 58, -199,
	57, 86, -96, -56, -200, -200, -200, -200, -33, 96,
	268, -200, -200, -200, 9, -77, -2, 116, 58, -200,
	-200, -200, -60, -181, -190, -171, 86, 63, 146, -126,
	-151, 70, 28, 28, -184, -185, 157, -187, -177, 58,
	-200, 266, 51, 269, -100, -200, -126, 64, -56, 63,
	-200, 57, -126, -192, 40, 267, 270, 56, -185, 35,
	-189, 40, -96, 159, 268, 58, 160, 269, -195, -196,
	54, -199, 270, -196, 54, 10, 9, -67, 156, -194,
	147, 142, 145, 30, -194, -200, -200, 141, 29, 72,
}
var yyDef = [...]int{

	24, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 586, 0, 330, 330, 330, 330, 330,
	330, 0, 658, 641, 0, 0, 0, 0, -2, 317,
	318, 0, 320, 321, 962, 962, 962, 962, 962, 0,
	0, 962, 0, 39, 40, 960, 1, 3, 594, 0,
	0, 334, -2, 332, 0, 641, 641, 0, 0, 68,
	69, 0, 0, 0, 949, 0, 639, 639, 639, 659,
	660, 663, 664, 25, 26, 27, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 0, 0, 0, 0,
	0, 642, 0, 637, 0, 637, 637, 637, 0, 268,
	412, 667, 668, 949, 0, 0, 0, 308, 0, 963,
	280, 0, 282, 963, 0, 963, 0, 289, 0, 0,
	295, 963, 300, 314, 315, 302, 316, 319, 322, 323,
	324, 325, 326, 962, 962, 329, 33, 598, 0, 0,
	586, 35, 0, 330, 335, 336, 0, 0, -2, -2,
	346, 352, 353, 354, 355, 331, 0, 358, 362, 0,
	422, 0, 427, 429, -2, -2, 0, 464, 465, 466,
	467, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	492, 493, 494, 495, 571, 572, 573, 574, 575, 576,
	577, 578, 431, 432, 568, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 0, 529, 529, 529,
	529, 529, 529, 529, 529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 50, 412,
	54, 0, 938, 622, -2, -2, 0, 0, 665, 666,
	-2, 802, -2, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 0, 0, 87, 0, 85, 0, 963, 0, 0,
	0, 0, 0, 0, 963, 963, 963, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 269, 963, 308, 272, 0, 0, 963, 963, 963,
	0, 963, 963, 279, 964, 965, 0, 189, 190, 191,
	283, 963, 963, 285, 0, 305, 303, 304, 297, 298,
	0, 311, 292, 293, 296, 327, 328, 34, 961, 28,
	0, 0, 595, 0, 587, 588, 591, 594, 33, 345,
	0, 367, 356, 347, 350, 351, 333, 0, 359, 0,
	0, 0, 363, 0, 365, 366, 0, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 450, 451,
	452, 453, 454, 455, 428, 0, 442, 0, 0, 0,
	484, 485, 486, 487, 488, 489, 490, 0, 343, 33,
	0, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 0, 560, 0, 513, 521, 0, 514, 522, 515,
	523, 516, 0, 517, 524, 518, 525, 519, 520, 526,
	0, 0, 0, 343, 343, 0, 0, 52, 0, 411,
	0, 369, 371, 372, 373, -2, 0, 395, -2, 0,
	0, 0, 46, 47, 0, 0, 0, 0, 938, 623,
	56, 57, 0, 0, 0, 165, 632, 633, 634, 630,
	214, 0, 0, 153, 149, 93, 94, 95, 142, 97,
	142, 142, 142, 142, 162, 162, 162, 162, 125, 126,
	127, 128, 129, 0, 0, 112, 142, 142, 142, 116,
	132, 133, 134, 135, 136, 137, 138, 139, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 144, 144, 144,
	146, 146, 661, 71, 0, 963, 0, 963, 83, 0,
	228, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 638, 0, 963, 265, 266, 413, 669, 670,
	270, 271, 309, 310, 273, 274, 275, 276, 277, 278,
	0, 192, 193, 284, 288, 0, 308, 0, 0, 290,
	291, 0, 0, 599, 0, 0, 0, 0, 0, 590,
	592, 593, 598, 36, 0, 579, 0, 0, 420, 0,
	0, 348, 31, 423, 424, 426, 443, 0, 445, 447,
	364, 360, 0, 569, -2, 433, 434, 458, 459, 460,
	0, 0, 0, 0, 456, 438, 0, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 483,
	544, 545, 0, 481, 482, 491, 0, 0, 0, 344,
	461, 0, 617, 33, 0, 0, 0, 0, 466, 571,
	0, 466, 571, 0, 0, 0, 341, 342, 566, 563,
	0, 0, 568, 0, 530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 400, 0, 0, 403, 0, 0, 0, 0,
	394, 0, 0, 415, 883, 396, 0, 398, 399, 420,
	0, 420, 49, 420, 51, 0, 414, 624, 55, 0,
	0, 60, 61, 625, 626, 627, 628, 0, 84, 215,
	217, 220, 221, 222, 88, 89, 90, 0, 0, 202,
	0, 0, 196, 196, 0, 194, 195, 86, 156, 154,
	0, 151, 150, 96, 0, 162, 162, 119, 120, 165,
	0, 165, 165, 165, 0, 0, 113, 114, 115, 107,
	0, 108, 109, 110, 0, 111, 0, 0, 963, 73,
	640, 74, 962, 0, 0, 653, 229, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 0, 75, 233,
	235, 234, 238, 0, 0, 0, 260, 963, 264, 305,
	305, 287, 306, 307, 312, 294, 0, 596, 597, 0,
	589, 29, 0, 635, 636, 580, 581, 582, 0, 357,
	368, 349, 444, 446, 448, 0, 343, 435, 456, 439,
	0, 436, 0, 0, 430, 496, 0, 0, 463, -2,
	500, 501, 0, 0, 0, 0, 0, 537, 0, 0,
	538, 0, 586, 0, 564, 0, 0, 512, 0, 531,
	0, 0, 532, 533, 534, 535, 536, 611, 0, 0,
	-2, 0, 0, 420, 619, 0, 370, 389, 391, 0,
	386, 401, 402, 404, 0, 406, 0, 408, 409, 374,
	376, 377, 0, 0, 0, 0, 397, 586, 420, 44,
	45, 0, 58, 59, 0, 0, 65, 166, 167, 0,
	218, 0, 0, 0, 184, 196, 196, 187, 197, 188,
	0, 158, 0, 155, 92, 152, 0, 165, 165, 121,
	0, 122, 123, 124, 0, 140, 0, 0, 0, 0,
	662, 72, 223, 962, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 962, 0,
	962, 654, 655, 656, 657, 0, 78, 0, 0, 0,
	0, 0, 263, 308, 308, 600, 0, 30, 584, 0,
	421, 361, 570, 0, 437, 0, 457, 440, 497, 498,
	0, 142, 142, 549, 142, 146, 552, 142, 554, 142,
	557, 0, 0, 0, 0, 0, 0, 0, 561, 511,
	567, 0, 569, 0, 0, 37, 0, 611, 601, 613,
	615, 0, 33, 0, 607, 0, 381, 586, 0, 0,
	383, 390, 0, 0, 384, 0, 385, 405, 407, 0,
	0, 0, 0, 594, 43, 62, 63, 64, 216, 219,
	0, 198, 142, 201, 185, 186, 0, 160, 0, 157,
	143, 117, 118, 163, 164, 162, 0, 162, 0, 147,
	0, 963, 224, 225, 226, 227, 0, 232, 0, 76,
	77, 0, 0, 237, 261, 281, 286, 32, 0, 0,
	499, 441, 502, 546, 162, 550, 551, 553, 555, 556,
	558, 504, 503, 0, 0, 0, 0, 0, 594, 0,
	565, 0, 0, 0, 38, 0, 616, -2, 0, 0,
	0, 53, 0, 594, 620, 621, 387, 0, 392, 0,
	0, 0, 395, 42, 176, 0, 200, 0, 379, 168,
	161, 0, 165, 141, 165, 0, 0, 70, 0, 79,
	80, 0, 0, 0, 585, 583, 547, 548, 0, 0,
	0, 0, 539, 0, 562, 0, 0, 0, 614, 0,
	-2, 0, 609, 608, 382, 41, 0, 0, 417, 0,
	0, 415, 175, 177, 0, 182, 0, 199, 0, 0,
	173, 0, 170, 172, 159, 130, 131, 145, 148, 0,
	0, 0, 0, 239, 505, 507, 506, 508, 0, 0,
	0, 510, 527, 528, 0, 604, 33, 0, 388, 416,
	418, 419, 378, 178, 179, 0, 183, 181, 0, 380,
	91, 0, 169, 171, 0, 255, 0, 81, 82, 75,
	509, 0, 0, 0, 612, -2, 610, 180, 0, 174,
	254, 0, 0, 78, 540, 0, 543, 0, 256, 0,
	236, 541, 0, 0, 0, 203, 0, 0, 204, 205,
	0, 0, 542, 206, 0, 0, 0, 0, 0, 207,
	209, 210, 0, 0, 208, 257, 258, 211, 212, 213,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 106, 98, 3,
	56, 58, 103, 101, 57, 102, 116, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 353,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:331
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:336
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:337
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:341
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
			setParseTree(yylex, nil)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:384
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:402
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:437
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:449
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:495
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:513
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:518
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:522
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:558
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = RepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.str = ReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.str = ReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.str = Serializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:601
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:607
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:616
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:633
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:644
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:672
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, IfNotExists: exists, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:683
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:690
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:694
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:705
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:713
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:719
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:946
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:951
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:955
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:964
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:976
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1022
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1026
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1044
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1057
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1079
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1096
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1130
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1163
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1207
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1211
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1221
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1233
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 203:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1244
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 204:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1248
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1252
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1256
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1262
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1282
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1286
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1290
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1295
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1303
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1311
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1333
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1343
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1347
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1351
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1356
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1463
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1469
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1473
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1479
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1483
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1495
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1499
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1507
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1515
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1520
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &OtherRead{}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1558
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1563
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1601
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1623
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1628
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1701
		{
			yyVAL.str = "extended "
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1707
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.str = "full "
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1731
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1741
		{
			yyVAL.showFilter = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1745
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1749
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1755
		{
			yyVAL.showFilter = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = SessionStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = GlobalStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.statement = &Begin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.statement = &Commit{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.statement = &Rollback{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.statement = &OtherRead{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &OtherRead{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &OtherRead{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1835
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1841
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1845
		{
			setAllowComments(yylex, true)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1849
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1855
		{
			yyVAL.bytes2 = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = UnionStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = UnionAllStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = UnionDistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1878
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = SQLCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = DistinctStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = DistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1904
		{
			yyVAL.selectExprs = nil
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1913
		{
			yyVAL.strs = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1917
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1929
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.str = SQLCacheStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.str = DistinctStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.str = DistinctStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.str = StraightJoinHint
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1975
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1979
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1983
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2012
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2022
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2046
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2056
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2076
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2089
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2093
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2097
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2101
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2109
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2113
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2121
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2124
		{
			yyVAL.empty = struct{}{}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.empty = struct{}{}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2129
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.str = JoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.str = JoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = JoinStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = StraightJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = LeftJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.str = LeftJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2178
		{
			yyVAL.str = RightJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.str = RightJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = NaturalJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2202
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2227
		{
			yyVAL.indexHints = nil
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2231
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2235
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2239
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2243
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = nil
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = IsNullStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = IsNotNullStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.str = IsTrueStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2362
		{
			yyVAL.str = IsNotTrueStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.str = IsFalseStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2370
		{
			yyVAL.str = IsNotFalseStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = EqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = LessThanStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = GreaterThanStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.str = LessEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.str = GreaterEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2396
		{
			yyVAL.str = NotEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2400
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 528:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2785
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.str = BooleanModeStr
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2793
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 542:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2797
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2801
		{
			yyVAL.str = QueryExpansionStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2881
		{
			yyVAL.str = string("")
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2891
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2901
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2920
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2924
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = &NullVal{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2982
		{
			yyVAL.exprs = nil
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2986
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3000
		{
			yyVAL.orderBy = nil
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3004
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3010
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3020
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3025
		{
			yyVAL.str = AscScr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.str = AscScr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.str = DescScr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3038
		{
			yyVAL.limit = nil
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3042
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3046
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3050
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3055
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.str = ForUpdateStr
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3063
		{
			yyVAL.str = ShareModeStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3089
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3093
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3097
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3112
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3116
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3121
		{
			yyVAL.updateExprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3125
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3135
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3145
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3151
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3187
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3210
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.bytes = []byte("charset")
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = &Default{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3241
		{
			yyVAL.byt = 0
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3243
		{
			yyVAL.byt = 1
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3246
		{
			yyVAL.byt = 0
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3248
		{
			yyVAL.byt = 1
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3251
		{
			yyVAL.str = ""
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.str = IgnoreStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3278
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3280
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3291
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3298
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3300
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3308
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3325
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3332
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3647
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3656
		{
			decNesting(yylex)
		}
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3661
		{
			skipToEnd(yylex)
		}
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3666
		{
			skipToEnd(yylex)
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3670
		{
			skipToEnd(yylex)
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3674
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
